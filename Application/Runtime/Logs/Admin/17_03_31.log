[ 2017-03-31T09:29:52+08:00 ] 203.130.43.155 /admin.php
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000240s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000299s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000336s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.

[ 2017-03-31T09:29:52+08:00 ] 203.130.43.155 /admin.php/Login/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000243s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000344s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000381s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000030s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000068s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004332s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004369s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000149s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000181s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000315s ]
INFO: [ app_end ] --END-- [ RunTime:0.000348s ]

[ 2017-03-31T09:29:53+08:00 ] 203.130.43.155 /admin.php/Login/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000243s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000325s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000362s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000030s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000069s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.004414s ]
INFO: [ view_parse ] --END-- [ RunTime:0.004454s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000104s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000134s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000350s ]
INFO: [ app_end ] --END-- [ RunTime:0.000385s ]

[ 2017-03-31T09:29:55+08:00 ] 203.130.43.155 /admin.php/Ajax/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000246s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000306s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000384s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.

[ 2017-03-31T09:30:02+08:00 ] 203.130.43.155 /admin.php/Ajax/login
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000244s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000350s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000475s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.

[ 2017-03-31T09:30:02+08:00 ] 203.130.43.155 /admin.php
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000228s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000403s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000545s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0006s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000101s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 361 行.
NOTIC: [8] Undefined variable: hospitalInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 424 行.
NOTIC: [8] Undefined variable: hospitalInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 438 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013209s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013250s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000109s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000146s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000348s ]
INFO: [ app_end ] --END-- [ RunTime:0.000385s ]

[ 2017-03-31T09:30:02+08:00 ] 203.130.43.155 /admin.php
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000242s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000296s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000333s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0005s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0004s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000100s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 361 行.
NOTIC: [8] Undefined variable: hospitalInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 424 行.
NOTIC: [8] Undefined variable: hospitalInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 438 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013254s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013290s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000105s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000178s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000305s ]
INFO: [ app_end ] --END-- [ RunTime:0.000342s ]

[ 2017-03-31T09:30:09+08:00 ] 203.130.43.155 /admin.php
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000249s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000349s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000387s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0005s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000104s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 361 行.
NOTIC: [8] Undefined variable: hospitalInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 424 行.
NOTIC: [8] Undefined variable: hospitalInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b595b808c2ebeeeb0478ffc30bb4e87a.php 第 438 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013371s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013407s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000111s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000146s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000364s ]
INFO: [ app_end ] --END-- [ RunTime:0.000401s ]

[ 2017-03-31T09:30:10+08:00 ] 203.130.43.155 /admin.php/Post/all
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000287s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000305s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000342s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `z_post` LIMIT 1   [ RunTime:0.0001s ]
SQL: SELECT * FROM `z_post` ORDER BY ctime desc LIMIT 0,20   [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000098s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/c171e2b85832ae9943251ee8295bfacb.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.012992s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013030s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000149s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000182s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000313s ]
INFO: [ app_end ] --END-- [ RunTime:0.000351s ]

[ 2017-03-31T09:30:10+08:00 ] 203.130.43.155 /admin.php/Post/all
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000243s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000350s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000388s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `z_post` LIMIT 1   [ RunTime:0.0001s ]
SQL: SELECT * FROM `z_post` ORDER BY ctime desc LIMIT 0,20   [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000069s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000132s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/c171e2b85832ae9943251ee8295bfacb.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013434s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013474s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000133s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000165s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000389s ]
INFO: [ app_end ] --END-- [ RunTime:0.000429s ]

[ 2017-03-31T09:30:14+08:00 ] 203.130.43.155 /admin.php/Post/updatePost/id/109
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000292s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000300s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000336s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT * FROM `z_post` WHERE `id` = 109 LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000113s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b94d69ac1621e983387ec69783f12599.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013708s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013743s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000149s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000181s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000310s ]
INFO: [ app_end ] --END-- [ RunTime:0.000348s ]

[ 2017-03-31T09:30:14+08:00 ] 203.130.43.155 /admin.php/Post/updatePost/id/109
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000245s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000305s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000384s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT * FROM `z_post` WHERE `id` = 109 LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000061s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000101s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b94d69ac1621e983387ec69783f12599.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013640s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013678s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000152s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000184s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000333s ]
INFO: [ app_end ] --END-- [ RunTime:0.000371s ]

[ 2017-03-31T09:37:28+08:00 ] 203.130.43.155 /admin.php/Ajax/addNewPost
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000249s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000347s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000386s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: UPDATE `z_post` SET `title`='模块化编程PPT内容',`category`='js',`tag`='js模块化开发',`summary`='准备了一份分享js模块化编程的ppt',`content`='<p>								</p><h2>1.为什么要搞模块化编程。</h2><h3><strong>命名冲突的故事。</strong></h3><p>小A的代码不行了。utile.js被B改动导致。</p><h3><strong>文件依赖的故事。</strong></h3><p>1.小A写的代码被小B，小C拿去用，各种不行，乃至以后的小D小E。</p><p>2.A.js依赖B.js,B.js依赖C.js永无止境的依赖魔咒。可读性差。</p><h3><strong>模块化可以解决这两个问题。</strong></h3><p>对外提供API接口，内部变量不可被污染，解决了命名冲突。</p><p>模块对内解决依赖关系，解决了依赖关系。</p><h2>2.什么是模块化？</h2><h3><strong>从哪里来</strong></h3><p>js本身没有模块化的东西。只是后来网页程序逐渐复杂，我们的功能越来越多，于是有些人就开始写一些具有特定功能的插件。这些应该就是模块的前身了。</p><h3><strong>模块的发展过程</strong></h3><h4><strong>函数写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">function&nbsp;m1(){
　　　　//...
}</pre><p>非常容易被污染的命名。</p><h4><strong>对象写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;new&nbsp;Object({
　　　　_count&nbsp;:&nbsp;0,
　　　　m1&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　},
　　　　m2&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　}
　　});</pre><p>虽然m1和m2不再直接暴漏，但是内部依然能被访问，比如我们可以改变_count的值：module1._count = 5;</p><h4><strong>立即执行函数可以完全限制访问，并且提供对外接口。其实这就是模块的原型。</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function(){
　　　　var&nbsp;_count&nbsp;=&nbsp;0;
　　　　var&nbsp;m1&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　var&nbsp;m2&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　return&nbsp;{
　　　　　　m1&nbsp;:&nbsp;m1,
　　　　　　m2&nbsp;:&nbsp;m2
　　　　};
&nbsp;&nbsp;})();</pre><h4><strong>实现继承</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;(mod){
　　　　mod.m3&nbsp;=&nbsp;function&nbsp;()&nbsp;{
　　　　　　//...
　　　　};
　　　　return&nbsp;mod;
　})(module1);</pre><h4><strong>引入全局变量(其实就是其他模块)，依赖变得明显且充分，这个时候的依赖关系和变量冲突问题似乎解决了。</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;zhangshan&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);
var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;lisi&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);</pre><h2>3.成熟的模块化编程语言Node.js是如何实现模块化的呢？</h2><h3><strong>这是一段基本的Node.js代码：</strong><br/></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;//&nbsp;引入hello模块:
var&nbsp;greet&nbsp;=&nbsp;require(&#39;./hello&#39;);
var&nbsp;s&nbsp;=&nbsp;&#39;Michael&#39;;&nbsp;
greet(s);&nbsp;//&nbsp;Hello,&nbsp;Michael!</pre><h3><strong>再看hello.js这个模块</strong></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;
var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);&nbsp;
}&nbsp;
module.exports&nbsp;=&nbsp;greet;</pre><h3><strong>为什么exports一下，就能被别的模块使用了呢？</strong>Node.js模块的实现过程</h3><h4><strong>加载hello.js时先包装一下</strong></h4><pre>(function&nbsp;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&#39;world&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
})();</pre><h4>那么对外的接口是怎么输出的呢？</h4><pre>//&nbsp;准备module对象:
var&nbsp;module&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;&#39;hello&#39;,&nbsp;&nbsp;&nbsp;&nbsp;//模块属性,Node.js对这个对象进行了存储。
&nbsp;&nbsp;&nbsp;&nbsp;exports:&nbsp;{}
};
var&nbsp;load&nbsp;=&nbsp;function&nbsp;(module)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;Hello,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;module.exports&nbsp;=&nbsp;greet;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;module.exports;
};
var&nbsp;exported&nbsp;=&nbsp;load(module);//&nbsp;保存module:save(module,&nbsp;exported);</pre><p>这样就实现了模块的输出</p><h2>4.cmd和amd的区别</h2><p>CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</p><h4>&nbsp; CMD<br/></h4><pre class=\"brush:as3;toolbar:false\">define(function(require,&nbsp;exports,&nbsp;module)&nbsp;{
var&nbsp;a&nbsp;=&nbsp;require(&#39;./a&#39;)
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
var&nbsp;b&nbsp;=&nbsp;require(&#39;./b&#39;)&nbsp;//&nbsp;依赖可以就近书写
b.doSomething()
//&nbsp;...
})</pre><h3>AMD</h3><pre class=\"brush:as3;toolbar:false\">//&nbsp;AMD&nbsp;默认推荐的是
define([&#39;./a&#39;,&nbsp;&#39;./b&#39;],&nbsp;function(a,&nbsp;b)&nbsp;{&nbsp;//&nbsp;依赖必须一开始就写好
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
b.doSomething()</pre><h2>5.sea.js模块化编程的实现</h2><p><a href=\"http://ruanwenwu.cn/blog/104.html\" target=\"_self\">http://ruanwenwu.cn/blog/104.html</a></p><p>							</p>',`mtime`='1490924248' WHERE `id` = 109 [ RunTime:0.0009s ]
NOTIC: [8] Undefined variable: id /data/wwwroot/blog/Application/Admin/Controller/AjaxController.class.php 第 56 行.
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0006s ]
SQL: SELECT * FROM `z_category` WHERE `name` = 'js' LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag` WHERE `name` = 'js模块化开发' LIMIT 1   [ RunTime:0.0001s ]

[ 2017-03-31T09:37:29+08:00 ] 203.130.43.155 /admin.php/Post/all
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000297s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000306s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000350s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `z_post` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT * FROM `z_post` ORDER BY ctime desc LIMIT 0,20   [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000063s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000102s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/c171e2b85832ae9943251ee8295bfacb.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013093s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013132s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000114s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000146s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000328s ]
INFO: [ app_end ] --END-- [ RunTime:0.000370s ]

[ 2017-03-31T09:48:21+08:00 ] 203.130.43.155 /admin.php/Post/updatePost/id/109
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000017s ]
INFO: [ app_init ] --END-- [ RunTime:0.000366s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000328s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000367s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0007s ]
SQL: SELECT * FROM `z_post` WHERE `id` = 109 LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000060s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000099s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b94d69ac1621e983387ec69783f12599.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013286s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013323s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000109s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000141s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000308s ]
INFO: [ app_end ] --END-- [ RunTime:0.000346s ]

[ 2017-03-31T09:50:23+08:00 ] 203.130.43.155 /admin.php/Ajax/addNewPost
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000246s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000300s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000381s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: UPDATE `z_post` SET `title`='Js模块化编程PPT内容',`category`='js',`tag`='js模块化开发',`summary`='Js模块化编程为我们解决了命名冲突和依赖的问题。',`content`='<p>								</p><h2>1.为什么要搞模块化编程。</h2><h3><strong>命名冲突的故事。</strong></h3><p>小A的代码不行了。utile.js被B改动导致。</p><h3><strong>文件依赖的故事。</strong></h3><p>1.小A写的代码被小B，小C拿去用，各种不行，乃至以后的小D小E。</p><p>2.A.js依赖B.js,B.js依赖C.js永无止境的依赖魔咒。可读性差。</p><h3><strong>模块化可以解决这两个问题。</strong></h3><p>对外提供API接口，内部变量不可被污染，解决了命名冲突。</p><p>模块对内解决依赖关系，解决了依赖关系。</p><h2>2.什么是模块化？</h2><h3><strong>从哪里来</strong></h3><p>js本身没有模块化的东西。只是后来网页程序逐渐复杂，我们的功能越来越多，于是有些人就开始写一些具有特定功能的插件。这些应该就是模块的前身了。</p><h3><strong>模块的发展过程</strong></h3><h4><strong>函数写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">function&nbsp;m1(){
　　　　//...
}</pre><p>非常容易被污染的命名。</p><h4><strong>对象写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;new&nbsp;Object({
　　　　_count&nbsp;:&nbsp;0,
　　　　m1&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　},
　　　　m2&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　}
　　});</pre><p>虽然m1和m2不再直接暴漏，但是内部依然能被访问，比如我们可以改变_count的值：module1._count = 5;</p><h4><strong>立即执行函数可以完全限制访问，并且提供对外接口。其实这就是模块的原型。</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function(){
　　　　var&nbsp;_count&nbsp;=&nbsp;0;
　　　　var&nbsp;m1&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　var&nbsp;m2&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　return&nbsp;{
　　　　　　m1&nbsp;:&nbsp;m1,
　　　　　　m2&nbsp;:&nbsp;m2
　　　　};
&nbsp;&nbsp;})();</pre><h4><strong>实现继承</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;(mod){
　　　　mod.m3&nbsp;=&nbsp;function&nbsp;()&nbsp;{
　　　　　　//...
　　　　};
　　　　return&nbsp;mod;
　})(module1);</pre><h4><strong>引入全局变量(其实就是其他模块)，依赖变得明显且充分，这个时候的依赖关系和变量冲突问题似乎解决了。</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;zhangshan&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);
var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;lisi&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);</pre><h2>3.成熟的模块化编程语言Node.js是如何实现模块化的呢？</h2><h3><strong>这是一段基本的Node.js代码：</strong><br/></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;//&nbsp;引入hello模块:
var&nbsp;greet&nbsp;=&nbsp;require(&#39;./hello&#39;);
var&nbsp;s&nbsp;=&nbsp;&#39;Michael&#39;;&nbsp;
greet(s);&nbsp;//&nbsp;Hello,&nbsp;Michael!</pre><h3><strong>再看hello.js这个模块</strong></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;
var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);&nbsp;
}&nbsp;
module.exports&nbsp;=&nbsp;greet;</pre><h3><strong>为什么exports一下，就能被别的模块使用了呢？</strong>Node.js模块的实现过程</h3><h4><strong>加载hello.js时先包装一下</strong></h4><pre>(function&nbsp;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&#39;world&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
})();</pre><h4>那么对外的接口是怎么输出的呢？</h4><pre>//&nbsp;准备module对象:
var&nbsp;module&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;&#39;hello&#39;,&nbsp;&nbsp;&nbsp;&nbsp;//模块属性,Node.js对这个对象进行了存储。
&nbsp;&nbsp;&nbsp;&nbsp;exports:&nbsp;{}
};
var&nbsp;load&nbsp;=&nbsp;function&nbsp;(module)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;Hello,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;module.exports&nbsp;=&nbsp;greet;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;module.exports;
};
var&nbsp;exported&nbsp;=&nbsp;load(module);//&nbsp;保存module:save(module,&nbsp;exported);</pre><p>这样就实现了模块的输出</p><h2>4.cmd和amd的区别</h2><p>CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</p><h4>&nbsp; CMD<br/></h4><pre class=\"brush:as3;toolbar:false\">define(function(require,&nbsp;exports,&nbsp;module)&nbsp;{
var&nbsp;a&nbsp;=&nbsp;require(&#39;./a&#39;)
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
var&nbsp;b&nbsp;=&nbsp;require(&#39;./b&#39;)&nbsp;//&nbsp;依赖可以就近书写
b.doSomething()
//&nbsp;...
})</pre><h3>AMD</h3><pre class=\"brush:as3;toolbar:false\">//&nbsp;AMD&nbsp;默认推荐的是
define([&#39;./a&#39;,&nbsp;&#39;./b&#39;],&nbsp;function(a,&nbsp;b)&nbsp;{&nbsp;//&nbsp;依赖必须一开始就写好
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
b.doSomething()</pre><h2>5.sea.js模块化编程的实现</h2><p><a href=\"http://ruanwenwu.cn/blog/104.html\" target=\"_self\">http://ruanwenwu.cn/blog/104.html</a></p><p><br/></p><p>							</p>',`mtime`='1490925023' WHERE `id` = 109 [ RunTime:0.0142s ]
NOTIC: [8] Undefined variable: id /data/wwwroot/blog/Application/Admin/Controller/AjaxController.class.php 第 56 行.
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category` WHERE `name` = 'js' LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag` WHERE `name` = 'js模块化开发' LIMIT 1   [ RunTime:0.0001s ]

[ 2017-03-31T09:50:24+08:00 ] 203.130.43.155 /admin.php/Post/all
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000015s ]
INFO: [ app_init ] --END-- [ RunTime:0.000299s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000312s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000349s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `z_post` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_post` ORDER BY ctime desc LIMIT 0,20   [ RunTime:0.0005s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000062s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000104s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/c171e2b85832ae9943251ee8295bfacb.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013576s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013620s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000113s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000186s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000327s ]
INFO: [ app_end ] --END-- [ RunTime:0.000365s ]

[ 2017-03-31T10:09:15+08:00 ] 203.130.43.155 /admin.php/Post/updatePost/id/109
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000053s ]
INFO: [ app_init ] --END-- [ RunTime:0.000290s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000306s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000344s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT * FROM `z_post` WHERE `id` = 109 LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000059s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000099s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b94d69ac1621e983387ec69783f12599.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013374s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013410s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000108s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000140s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000358s ]
INFO: [ app_end ] --END-- [ RunTime:0.000396s ]

[ 2017-03-31T10:10:13+08:00 ] 203.130.43.155 /admin.php/Ajax/addNewPost
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000297s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000299s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000337s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: UPDATE `z_post` SET `title`='Js模块化编程PPT内容',`category`='js',`tag`='js模块化开发',`summary`='Js模块化编程为我们解决了命名冲突和依赖的问题。',`content`='<p>								</p><h2>1.为什么要模块化编程。</h2><h3><strong>命名冲突的故事。</strong></h3><p>小A的代码不行了。utile.js被B改动导致。</p><h3><strong>文件依赖的故事。</strong></h3><p>1.小A写的代码被小B，小C拿去用，各种不行，乃至以后的小D小E。</p><p>2.A.js依赖B.js，B.js依赖C.js。永无止境的依赖魔咒。可读性差。</p><h3><strong>模块化可以解决这两个问题。</strong></h3><p>对外提供API接口，内部变量不可被污染，解决了命名冲突。</p><p>模块对内解决依赖关系，解决了依赖关系。</p><h2>2.什么是模块化？</h2><h3><strong>从哪里来</strong></h3><p>js本身没有模块化的东西。只是后来网页程序逐渐复杂，我们的功能越来越多，于是有些人就开始写一些具有特定功能的插件。这些应该就是模块的前身了。</p><h3><strong>模块的发展过程</strong></h3><h4><strong>函数写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">function&nbsp;m1(){
　　　　//...
}</pre><p>非常容易被污染的命名。</p><h4><strong>对象写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;new&nbsp;Object({
　　　　_count&nbsp;:&nbsp;0,
　　　　m1&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　},
　　　　m2&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　}
　　});</pre><p>虽然m1和m2不再直接暴漏，但是内部依然能被访问，比如我们可以改变_count的值：module1._count = 5;</p><h4><strong>立即执行函数可以完全限制访问，并且提供对外接口。其实这就是模块的原型。</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function(){
　　　　var&nbsp;_count&nbsp;=&nbsp;0;
　　　　var&nbsp;m1&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　var&nbsp;m2&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　return&nbsp;{
　　　　　　m1&nbsp;:&nbsp;m1,
　　　　　　m2&nbsp;:&nbsp;m2
　　　　};
&nbsp;&nbsp;})();</pre><h4><strong>实现继承</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;(mod){
　　　　mod.m3&nbsp;=&nbsp;function&nbsp;()&nbsp;{
　　　　　　//...
　　　　};
　　　　return&nbsp;mod;
　})(module1);</pre><h4><strong>引入全局变量(其实就是其他模块)，依赖变得明显且充分，这个时候的依赖关系和变量冲突问题似乎解决了。</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;zhangshan&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);
var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;lisi&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);</pre><h2>3.成熟的模块化编程语言Node.js是如何实现模块化的呢？</h2><h3><strong>这是一段基本的Node.js代码：</strong><br/></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;//&nbsp;引入hello模块:
var&nbsp;greet&nbsp;=&nbsp;require(&#39;./hello&#39;);
var&nbsp;s&nbsp;=&nbsp;&#39;Michael&#39;;&nbsp;
greet(s);&nbsp;//&nbsp;Hello,&nbsp;Michael!</pre><h3><strong>再看hello.js这个模块</strong></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;
var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);&nbsp;
}&nbsp;
module.exports&nbsp;=&nbsp;greet;</pre><h3><strong>为什么exports一下，就能被别的模块使用了呢？</strong>Node.js模块的实现过程</h3><h4><strong>加载hello.js时先包装一下</strong></h4><pre>(function&nbsp;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&#39;world&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
})();</pre><h4>那么对外的接口是怎么输出的呢？</h4><pre>//&nbsp;准备module对象:
var&nbsp;module&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;&#39;hello&#39;,&nbsp;&nbsp;&nbsp;&nbsp;//模块属性,Node.js对这个对象进行了存储。
&nbsp;&nbsp;&nbsp;&nbsp;exports:&nbsp;{}
};
var&nbsp;load&nbsp;=&nbsp;function&nbsp;(module)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;Hello,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;module.exports&nbsp;=&nbsp;greet;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;module.exports;
};
var&nbsp;exported&nbsp;=&nbsp;load(module);//&nbsp;保存module:save(module,&nbsp;exported);</pre><p>这样就实现了模块的输出</p><h2>4.cmd和amd的区别</h2><p>CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</p><h4>&nbsp; CMD<br/></h4><pre class=\"brush:as3;toolbar:false\">define(function(require,&nbsp;exports,&nbsp;module)&nbsp;{
var&nbsp;a&nbsp;=&nbsp;require(&#39;./a&#39;)
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
var&nbsp;b&nbsp;=&nbsp;require(&#39;./b&#39;)&nbsp;//&nbsp;依赖可以就近书写
b.doSomething()
//&nbsp;...
})</pre><h3>AMD</h3><pre class=\"brush:as3;toolbar:false\">//&nbsp;AMD&nbsp;默认推荐的是
define([&#39;./a&#39;,&nbsp;&#39;./b&#39;],&nbsp;function(a,&nbsp;b)&nbsp;{&nbsp;//&nbsp;依赖必须一开始就写好
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
b.doSomething()</pre><h2>5.sea.js模块化编程的实现</h2><p><a href=\"http://ruanwenwu.cn/blog/104.html\" target=\"_self\">http://ruanwenwu.cn/blog/104.html</a></p><p><br/></p><p><br/></p><p>							</p>',`mtime`='1490926213' WHERE `id` = 109 [ RunTime:0.0191s ]
NOTIC: [8] Undefined variable: id /data/wwwroot/blog/Application/Admin/Controller/AjaxController.class.php 第 56 行.
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category` WHERE `name` = 'js' LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag` WHERE `name` = 'js模块化开发' LIMIT 1   [ RunTime:0.0001s ]

[ 2017-03-31T10:10:15+08:00 ] 203.130.43.155 /admin.php/Post/all
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000244s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000360s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000398s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `z_post` LIMIT 1   [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_post` ORDER BY ctime desc LIMIT 0,20   [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000064s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000111s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/c171e2b85832ae9943251ee8295bfacb.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013282s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013321s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000114s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000146s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000379s ]
INFO: [ app_end ] --END-- [ RunTime:0.000418s ]

[ 2017-03-31T10:10:24+08:00 ] 203.130.43.155 /admin.php/Post/updatePost/id/109
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000292s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000321s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000359s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT * FROM `z_post` WHERE `id` = 109 LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category`  [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag`  [ RunTime:0.0001s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000065s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000115s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/b94d69ac1621e983387ec69783f12599.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.013866s ]
INFO: [ view_parse ] --END-- [ RunTime:0.013903s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000107s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000138s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000366s ]
INFO: [ app_end ] --END-- [ RunTime:0.000406s ]

[ 2017-03-31T10:11:25+08:00 ] 203.130.43.155 /admin.php/Ajax/addNewPost
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000013s ]
INFO: [ app_init ] --END-- [ RunTime:0.000256s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000304s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000343s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: UPDATE `z_post` SET `title`='Js模块化编程PPT内容',`category`='js',`tag`='js模块化开发',`summary`='Js模块化编程为我们解决了命名冲突和依赖的问题。',`content`='<p>								</p><h2>1.为什么要模块化编程</h2><h3><strong>命名冲突的故事</strong></h3><p>小A的代码不行了。utile.js被B改动导致。</p><h3><strong>文件依赖的故事</strong></h3><p>1.小A写的代码被小B，小C拿去用，各种不行，乃至以后的小D小E。</p><p>2.A.js依赖B.js，B.js依赖C.js。永无止境的依赖魔咒。可读性差。</p><h3><strong>模块化可以解决这两个问题</strong></h3><p>对外提供API接口，内部变量不可被污染，解决了命名冲突。</p><p>模块对内解决依赖关系，解决了依赖关系。</p><h2>2.什么是模块化</h2><h3><strong>从哪里来</strong></h3><p>js本身没有模块化的东西。只是后来网页程序逐渐复杂，我们的功能越来越多，于是有些人就开始写一些具有特定功能的插件。这些应该就是模块的前身了。</p><h3><strong>模块的发展过程</strong></h3><h4><strong>函数写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">function&nbsp;m1(){
　　　　//...
}</pre><p>非常容易被污染的命名。</p><h4><strong>对象写法：</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;new&nbsp;Object({
　　　　_count&nbsp;:&nbsp;0,
　　　　m1&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　},
　　　　m2&nbsp;:&nbsp;function&nbsp;(){
　　　　　　//...
　　　　}
　　});</pre><p>虽然m1和m2不再直接暴漏，但是内部依然能被访问，比如我们可以改变_count的值：module1._count = 5;</p><h4><strong>立即执行函数可以完全限制访问，并且提供对外接口。其实这就是模块的原型</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function(){
　　　　var&nbsp;_count&nbsp;=&nbsp;0;
　　　　var&nbsp;m1&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　var&nbsp;m2&nbsp;=&nbsp;function(){
　　　　　　//...
　　　　};
　　　　return&nbsp;{
　　　　　　m1&nbsp;:&nbsp;m1,
　　　　　　m2&nbsp;:&nbsp;m2
　　　　};
&nbsp;&nbsp;})();</pre><h4><strong>实现继承</strong></h4><pre class=\"brush:as3;toolbar:false\">　var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;(mod){
　　　　mod.m3&nbsp;=&nbsp;function&nbsp;()&nbsp;{
　　　　　　//...
　　　　};
　　　　return&nbsp;mod;
　})(module1);</pre><h4><strong>引入全局变量(其实就是其他模块)，依赖变得明显且充分，这个时候的依赖关系和变量冲突问题似乎解决了</strong></h4><pre class=\"brush:as3;toolbar:false\">var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;zhangshan&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);
var&nbsp;module1&nbsp;=&nbsp;(function&nbsp;($,&nbsp;YAHOO)&nbsp;{
　　　　//...
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&quot;lisi&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;{};
})(jQuery,&nbsp;YAHOO);</pre><h2>3.成熟的模块化编程语言Node.js是如何实现模块化的呢</h2><h3><strong>这是一段基本的Node.js代码</strong><br/></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;//&nbsp;引入hello模块:
var&nbsp;greet&nbsp;=&nbsp;require(&#39;./hello&#39;);
var&nbsp;s&nbsp;=&nbsp;&#39;Michael&#39;;&nbsp;
greet(s);&nbsp;//&nbsp;Hello,&nbsp;Michael!</pre><h3><strong>再看hello.js这个模块</strong></h3><pre class=\"brush:as3;toolbar:false\">&#39;use&nbsp;strict&#39;;
var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);&nbsp;
}&nbsp;
module.exports&nbsp;=&nbsp;greet;</pre><h3><strong>为什么exports一下，就能被别的模块使用了呢？</strong>Node.js模块的实现过程</h3><h4><strong>加载hello.js时先包装一下</strong></h4><pre>(function&nbsp;()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;s&nbsp;=&nbsp;&#39;Hello&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;&#39;world&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;console.log(s&nbsp;+&nbsp;&#39;&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
})();</pre><h4>那么对外的接口是怎么输出的呢</h4><pre>//&nbsp;准备module对象:
var&nbsp;module&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;&#39;hello&#39;,&nbsp;&nbsp;&nbsp;&nbsp;//模块属性,Node.js对这个对象进行了存储。
&nbsp;&nbsp;&nbsp;&nbsp;exports:&nbsp;{}
};
var&nbsp;load&nbsp;=&nbsp;function&nbsp;(module)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;读取的hello.js代码:
&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;greet(name)&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;Hello,&nbsp;&#39;&nbsp;+&nbsp;name&nbsp;+&nbsp;&#39;!&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;module.exports&nbsp;=&nbsp;greet;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;hello.js代码结束
&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;module.exports;
};
var&nbsp;exported&nbsp;=&nbsp;load(module);//&nbsp;保存module:save(module,&nbsp;exported);</pre><p>这样就实现了模块的输出</p><h2>4.cmd和amd的区别</h2><p>CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：</p><h4>&nbsp; CMD<br/></h4><pre class=\"brush:as3;toolbar:false\">define(function(require,&nbsp;exports,&nbsp;module)&nbsp;{
var&nbsp;a&nbsp;=&nbsp;require(&#39;./a&#39;)
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
var&nbsp;b&nbsp;=&nbsp;require(&#39;./b&#39;)&nbsp;//&nbsp;依赖可以就近书写
b.doSomething()
//&nbsp;...
})</pre><h3>AMD</h3><pre class=\"brush:as3;toolbar:false\">//&nbsp;AMD&nbsp;默认推荐的是
define([&#39;./a&#39;,&nbsp;&#39;./b&#39;],&nbsp;function(a,&nbsp;b)&nbsp;{&nbsp;//&nbsp;依赖必须一开始就写好
a.doSomething()
//&nbsp;此处略去&nbsp;100&nbsp;行
b.doSomething()</pre><h2>5.sea.js模块化编程的实现</h2><p><a href=\"http://ruanwenwu.cn/blog/104.html\" target=\"_self\">http://ruanwenwu.cn/blog/104.html</a></p><p><br/></p><p>							</p>',`mtime`='1490926285' WHERE `id` = 109 [ RunTime:0.0120s ]
NOTIC: [8] Undefined variable: id /data/wwwroot/blog/Application/Admin/Controller/AjaxController.class.php 第 56 行.
SQL: SHOW COLUMNS FROM `z_category` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_category` WHERE `name` = 'js' LIMIT 1   [ RunTime:0.0001s ]
SQL: SHOW COLUMNS FROM `z_tag` [ RunTime:0.0003s ]
SQL: SELECT * FROM `z_tag` WHERE `name` = 'js模块化开发' LIMIT 1   [ RunTime:0.0001s ]

[ 2017-03-31T10:11:27+08:00 ] 203.130.43.155 /admin.php/Post/all
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000012s ]
INFO: [ app_init ] --END-- [ RunTime:0.000287s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000378s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000421s ]
NOTIC: [8] A session had already been started - ignoring session_start() /data/wwwroot/blog/ThinkPHP/Common/functions.php 第 1263 行.
SQL: SHOW COLUMNS FROM `z_post` [ RunTime:0.0006s ]
SQL: SELECT COUNT(*) AS tp_count FROM `z_post` LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT * FROM `z_post` ORDER BY ctime desc LIMIT 0,20   [ RunTime:0.0004s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000057s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000096s ]
NOTIC: [8] Undefined variable: userInfo /data/wwwroot/blog/Application/Runtime/Cache/Admin/c171e2b85832ae9943251ee8295bfacb.php 第 361 行.
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.012796s ]
INFO: [ view_parse ] --END-- [ RunTime:0.012832s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000109s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000142s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000310s ]
INFO: [ app_end ] --END-- [ RunTime:0.000349s ]

